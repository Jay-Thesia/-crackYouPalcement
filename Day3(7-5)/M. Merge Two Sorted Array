Logic:

--> Both arrays are sorted so take advantage of it so that we started from last indexes
as follow for i and j

--> sol1 we use the extra space.
--> sol2 we don't use the extra space. (starting form the beginning)

👩‍💻 Code:

Worst Case( T.C. = O(m+n), S.C.=O(m+n))

class Solution {
    public void merge(int[] a1, int m, int[] a2, int n) {
        
        int[] ans=new int[m+n];
        
        int i=0;
        int j=0;
        int k=0;
        
        while(i<m && j<n){
            if(i<m && a1[i]<a2[j]){
                ans[k++]=a1[i++];
            }
            
            if(j<n && a1[i]>=a2[j]){
                ans[k++]=a2[j++];
            }
        }
        
        while(i<m){
            ans[k++]=a1[i++];
        }
        
        while(j<n){
            ans[k++]=a2[j++];
        }
        
        for(i=0;i<ans.length;i++){
            a1[i]=ans[i];
        }
    }
}

BEST CASE( T.C. = O(m+n), S.C.=O(1))

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        if(m==0 && n==1){
            nums1[0]=nums2[0];
            return;
        }
        
        int i=m-1;
        int j=n-1;
        int k=m+n-1;
        
        while(i>=0 && j>=0){
            
            if(nums1[i]>nums2[j]){
                nums1[k--]=nums1[i--];
            }
            
            if(i>=0 && j>=0 && nums1[i]<=nums2[j]){
                nums1[k--]=nums2[j--];
            }
            
        }
        
        while(i<0 && j>=0){
            nums1[k--]=nums2[j--];
        }
    }
}

