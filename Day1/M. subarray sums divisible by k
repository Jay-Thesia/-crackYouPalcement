Logic: 


-->> Subarray sum type question first think come to you mind is HashMap.
-->> Hashmap with two variable sum and rem
-->> store 0 the rem with 1(times) and go and add the sum and find the rem and add it to the hashmap
-->> find that any number is coming again then increase its timing and add to answer;

Code(Using hashmap) O(n)t  O(n)s:

class Solution {
    public int subarraysDivByK(int[] nums, int k) {
     
        int n=nums.length;
        
        if(n==1 && nums[0]%k==0){
            return 1;
        }
         if(n==1 && nums[0]%k!=0){
            return 0;
        }
        
        HashMap<Integer,Integer> hm=new HashMap();
        
        hm.put(0,1);
        
        int sum=0;
        int rem=0;
        int count=0;
        
        for(int i=0;i<n;i++){
            sum+=nums[i];
            rem=(sum%k);
            
            if(rem<0){
                rem+=k;
            }
            
            if(hm.containsKey(rem)){
                  count+=hm.get(rem);
                hm.put(rem,hm.get(rem)+1);
              
            }else{
                hm.put(rem,1);
            }
        }
        
        return count;
    }
}
