🎯 Logic:

--> When we have question like around Parentheses use most of the cases use stack.
--> push the opening bracket to the stack.
--> pop the closning bracket to the stack. (if stack is not empty)
--> if stack size is zero then return true.
--> if st.peek is not the opening bracket(ex. {) of current closing bracket(ex. }) then return false.

🎯 conrner case:

--> Open brackets must be closed by the same type of brackets.
Input: s = "(]"
Output: false

--> Open brackets must be closed in the correct order.

👨‍💻 Code: T.C.= O(N), S.C. = O(N) //bez all the open bracket then the stack is full with all opening bracket then S.C. is this.

class Solution {
    public boolean isValid(String s) {
        
        Stack<Character> st=new Stack();
        
        int i=0;
        int len=s.length();
        
        if(len==1)
            return false;
        
        while(i<len){
            if(s.charAt(i)=='(' || s.charAt(i)=='{' || s.charAt(i)=='[')
                st.push(s.charAt(i));
            
            else if(s.charAt(i)=='}'){
                if(st.isEmpty() || st.peek()!='{')
                    return false;
                else
                    st.pop();
            }
            
            else if(s.charAt(i)==']'){
                if(st.isEmpty() ||st.peek()!='[')
                    return false;
                else
                    st.pop();
            }
            
            else if(s.charAt(i)==')'){
                if(st.isEmpty() || st.peek()!='(')
                    return false;
                else
                    st.pop();
            }
            i++;
        }
        
        if(st.size()==0)
            return true;
        else
            return false;
    }
}

